# coding: utf-8

"""
    rokka.io

    digital image processing done right. [Documentation](https://rokka.io/documentation). [Changelog](https://api.rokka.io/changelog.md).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rokka_client_codegen.api_client import ApiClient


class SourceimagesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def copy_source_image(self, destination, organization, hash, **kwargs):  # noqa: E501
        """Copy a single source image to another org.  # noqa: E501

        The metadata is copied as well. After copying, changes to either image metadata are not reflected in the other image metadata.  This is a proxy method for COPY on /sourceimages/{organization}/{hash}. It allows to copy images with a POST request, to work around restrictive firewalls and allows to produce a swagger specification for this operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.copy_source_image(destination, organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str destination: The destination organization (required)
        :param str organization: (required)
        :param str hash: (required)
        :param str overwrite: If set to 'F', existing images won't be overwritten.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.copy_source_image_with_http_info(destination, organization, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_source_image_with_http_info(destination, organization, hash, **kwargs)  # noqa: E501
            return data

    def copy_source_image_with_http_info(self, destination, organization, hash, **kwargs):  # noqa: E501
        """Copy a single source image to another org.  # noqa: E501

        The metadata is copied as well. After copying, changes to either image metadata are not reflected in the other image metadata.  This is a proxy method for COPY on /sourceimages/{organization}/{hash}. It allows to copy images with a POST request, to work around restrictive firewalls and allows to produce a swagger specification for this operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.copy_source_image_with_http_info(destination, organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str destination: The destination organization (required)
        :param str organization: (required)
        :param str hash: (required)
        :param str overwrite: If set to 'F', existing images won't be overwritten.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destination', 'organization', 'hash', 'overwrite']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_source_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destination' is set
        if ('destination' not in params or
                params['destination'] is None):
            raise ValueError("Missing the required parameter `destination` when calling `copy_source_image`")  # noqa: E501
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `copy_source_image`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `copy_source_image`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `copy_source_image`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `copy_source_image`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}
        if 'destination' in params:
            header_params['Destination'] = params['destination']  # noqa: E501
        if 'overwrite' in params:
            header_params['Overwrite'] = params['overwrite']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_source_image(self, filedata, organization, **kwargs):  # noqa: E501
        """Upload new source images.  # noqa: E501

        The request is form data for the uploaded files and arrays of metadata. Files and metadata are matched based on their order in the request.  Note that this call allows to upload multiple images, but the swagger UI does not support this.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_source_image(filedata, organization, async=True)
        >>> result = thread.get()

        :param async bool
        :param file filedata: The binary images (required)
        :param str organization: (required)
        :param str meta_dynamic: JSON metadata about the image, e.g. subject area. See https://rokka.io/documentation/references/dynamic-metadata.html
        :param str meta_user: User specific JSON metadata that can be used when searching source images. See https://rokka.io/documentation/references/user-metadata.html
        :return: ListSourceImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_source_image_with_http_info(filedata, organization, **kwargs)  # noqa: E501
        else:
            (data) = self.create_source_image_with_http_info(filedata, organization, **kwargs)  # noqa: E501
            return data

    def create_source_image_with_http_info(self, filedata, organization, **kwargs):  # noqa: E501
        """Upload new source images.  # noqa: E501

        The request is form data for the uploaded files and arrays of metadata. Files and metadata are matched based on their order in the request.  Note that this call allows to upload multiple images, but the swagger UI does not support this.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_source_image_with_http_info(filedata, organization, async=True)
        >>> result = thread.get()

        :param async bool
        :param file filedata: The binary images (required)
        :param str organization: (required)
        :param str meta_dynamic: JSON metadata about the image, e.g. subject area. See https://rokka.io/documentation/references/dynamic-metadata.html
        :param str meta_user: User specific JSON metadata that can be used when searching source images. See https://rokka.io/documentation/references/user-metadata.html
        :return: ListSourceImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filedata', 'organization', 'meta_dynamic', 'meta_user']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_source_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filedata' is set
        if ('filedata' not in params or
                params['filedata'] is None):
            raise ValueError("Missing the required parameter `filedata` when calling `create_source_image`")  # noqa: E501
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `create_source_image`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `create_source_image`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'filedata' in params:
            local_var_files['filedata'] = params['filedata']  # noqa: E501
        if 'meta_dynamic' in params:
            form_params.append(('meta_dynamic[]', params['meta_dynamic']))  # noqa: E501
        if 'meta_user' in params:
            form_params.append(('meta_user[]', params['meta_user']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListSourceImagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_source_image_meta_dynamic_with_name(self, meta_dynamic_definition, organization, hash, meta_name, **kwargs):  # noqa: E501
        """Adds or updates a specific dynamic meta data for an image.  # noqa: E501

        This changes the hash of the image. The response provides the new location of the image in the Location header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_source_image_meta_dynamic_with_name(meta_dynamic_definition, organization, hash, meta_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param object meta_dynamic_definition: Dynamic Meta Data definition (required)
        :param str organization: (required)
        :param str hash: (required)
        :param str meta_name: (required)
        :param bool delete_previous: If the image with the original hash should be deleted
        :return: SourceImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_source_image_meta_dynamic_with_name_with_http_info(meta_dynamic_definition, organization, hash, meta_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_source_image_meta_dynamic_with_name_with_http_info(meta_dynamic_definition, organization, hash, meta_name, **kwargs)  # noqa: E501
            return data

    def create_source_image_meta_dynamic_with_name_with_http_info(self, meta_dynamic_definition, organization, hash, meta_name, **kwargs):  # noqa: E501
        """Adds or updates a specific dynamic meta data for an image.  # noqa: E501

        This changes the hash of the image. The response provides the new location of the image in the Location header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_source_image_meta_dynamic_with_name_with_http_info(meta_dynamic_definition, organization, hash, meta_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param object meta_dynamic_definition: Dynamic Meta Data definition (required)
        :param str organization: (required)
        :param str hash: (required)
        :param str meta_name: (required)
        :param bool delete_previous: If the image with the original hash should be deleted
        :return: SourceImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meta_dynamic_definition', 'organization', 'hash', 'meta_name', 'delete_previous']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_source_image_meta_dynamic_with_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meta_dynamic_definition' is set
        if ('meta_dynamic_definition' not in params or
                params['meta_dynamic_definition'] is None):
            raise ValueError("Missing the required parameter `meta_dynamic_definition` when calling `create_source_image_meta_dynamic_with_name`")  # noqa: E501
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `create_source_image_meta_dynamic_with_name`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `create_source_image_meta_dynamic_with_name`")  # noqa: E501
        # verify the required parameter 'meta_name' is set
        if ('meta_name' not in params or
                params['meta_name'] is None):
            raise ValueError("Missing the required parameter `meta_name` when calling `create_source_image_meta_dynamic_with_name`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `create_source_image_meta_dynamic_with_name`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `create_source_image_meta_dynamic_with_name`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        if 'meta_name' in params and not re.search('[a-zA-Z_]+', params['meta_name']):  # noqa: E501
            raise ValueError("Invalid value for parameter `meta_name` when calling `create_source_image_meta_dynamic_with_name`, must conform to the pattern `/[a-zA-Z_]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501
        if 'meta_name' in params:
            path_params['metaName'] = params['meta_name']  # noqa: E501

        query_params = []
        if 'delete_previous' in params:
            query_params.append(('deletePrevious', params['delete_previous']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'meta_dynamic_definition' in params:
            body_params = params['meta_dynamic_definition']
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}/meta/dynamic/{metaName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SourceImage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_source_image_meta_user(self, user_meta_data, organization, hash, **kwargs):  # noqa: E501
        """Replace the image meta data with new information.  # noqa: E501

        All existing meta data for the image is removed and then the new meta data is added.  User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_source_image_meta_user(user_meta_data, organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param object user_meta_data: User Meta Data as a json hashmap (required)
        :param str organization: (required)
        :param str hash: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_source_image_meta_user_with_http_info(user_meta_data, organization, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.create_source_image_meta_user_with_http_info(user_meta_data, organization, hash, **kwargs)  # noqa: E501
            return data

    def create_source_image_meta_user_with_http_info(self, user_meta_data, organization, hash, **kwargs):  # noqa: E501
        """Replace the image meta data with new information.  # noqa: E501

        All existing meta data for the image is removed and then the new meta data is added.  User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_source_image_meta_user_with_http_info(user_meta_data, organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param object user_meta_data: User Meta Data as a json hashmap (required)
        :param str organization: (required)
        :param str hash: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_meta_data', 'organization', 'hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_source_image_meta_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_meta_data' is set
        if ('user_meta_data' not in params or
                params['user_meta_data'] is None):
            raise ValueError("Missing the required parameter `user_meta_data` when calling `create_source_image_meta_user`")  # noqa: E501
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `create_source_image_meta_user`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `create_source_image_meta_user`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `create_source_image_meta_user`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `create_source_image_meta_user`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_meta_data' in params:
            body_params = params['user_meta_data']
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}/meta/user', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_source_image_meta_user_wth_name(self, user_meta_data_single_field, organization, hash, meta_name, **kwargs):  # noqa: E501
        """Adds or updates one user meta data field for an image.  # noqa: E501

        User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_source_image_meta_user_wth_name(user_meta_data_single_field, organization, hash, meta_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_meta_data_single_field: User Meta Data for a single field in json format (required)
        :param str organization: (required)
        :param str hash: (required)
        :param str meta_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_source_image_meta_user_wth_name_with_http_info(user_meta_data_single_field, organization, hash, meta_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_source_image_meta_user_wth_name_with_http_info(user_meta_data_single_field, organization, hash, meta_name, **kwargs)  # noqa: E501
            return data

    def create_source_image_meta_user_wth_name_with_http_info(self, user_meta_data_single_field, organization, hash, meta_name, **kwargs):  # noqa: E501
        """Adds or updates one user meta data field for an image.  # noqa: E501

        User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_source_image_meta_user_wth_name_with_http_info(user_meta_data_single_field, organization, hash, meta_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_meta_data_single_field: User Meta Data for a single field in json format (required)
        :param str organization: (required)
        :param str hash: (required)
        :param str meta_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_meta_data_single_field', 'organization', 'hash', 'meta_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_source_image_meta_user_wth_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_meta_data_single_field' is set
        if ('user_meta_data_single_field' not in params or
                params['user_meta_data_single_field'] is None):
            raise ValueError("Missing the required parameter `user_meta_data_single_field` when calling `create_source_image_meta_user_wth_name`")  # noqa: E501
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `create_source_image_meta_user_wth_name`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `create_source_image_meta_user_wth_name`")  # noqa: E501
        # verify the required parameter 'meta_name' is set
        if ('meta_name' not in params or
                params['meta_name'] is None):
            raise ValueError("Missing the required parameter `meta_name` when calling `create_source_image_meta_user_wth_name`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `create_source_image_meta_user_wth_name`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `create_source_image_meta_user_wth_name`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        if 'meta_name' in params and not re.search('[a-zA-Z0-9_-]+', params['meta_name']):  # noqa: E501
            raise ValueError("Invalid value for parameter `meta_name` when calling `create_source_image_meta_user_wth_name`, must conform to the pattern `/[a-zA-Z0-9_-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501
        if 'meta_name' in params:
            path_params['metaName'] = params['meta_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_meta_data_single_field' in params:
            body_params = params['user_meta_data_single_field']
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}/meta/user/{metaName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_source_image(self, organization, hash, **kwargs):  # noqa: E501
        """Delete a single source image.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_source_image(organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_source_image_with_http_info(organization, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_source_image_with_http_info(organization, hash, **kwargs)  # noqa: E501
            return data

    def delete_source_image_with_http_info(self, organization, hash, **kwargs):  # noqa: E501
        """Delete a single source image.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_source_image_with_http_info(organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_source_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `delete_source_image`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `delete_source_image`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `delete_source_image`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `delete_source_image`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_source_image_meta_dynamic_with_name(self, organization, hash, meta_name, **kwargs):  # noqa: E501
        """Deletes a specific dynamic meta data.  # noqa: E501

        This changes the hash of the image. The response provides the new location of the image in the Location header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_source_image_meta_dynamic_with_name(organization, hash, meta_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :param str meta_name: (required)
        :param bool delete_previous: If the image with the original hash should be deleted
        :return: SourceImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_source_image_meta_dynamic_with_name_with_http_info(organization, hash, meta_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_source_image_meta_dynamic_with_name_with_http_info(organization, hash, meta_name, **kwargs)  # noqa: E501
            return data

    def delete_source_image_meta_dynamic_with_name_with_http_info(self, organization, hash, meta_name, **kwargs):  # noqa: E501
        """Deletes a specific dynamic meta data.  # noqa: E501

        This changes the hash of the image. The response provides the new location of the image in the Location header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_source_image_meta_dynamic_with_name_with_http_info(organization, hash, meta_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :param str meta_name: (required)
        :param bool delete_previous: If the image with the original hash should be deleted
        :return: SourceImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'hash', 'meta_name', 'delete_previous']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_source_image_meta_dynamic_with_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `delete_source_image_meta_dynamic_with_name`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `delete_source_image_meta_dynamic_with_name`")  # noqa: E501
        # verify the required parameter 'meta_name' is set
        if ('meta_name' not in params or
                params['meta_name'] is None):
            raise ValueError("Missing the required parameter `meta_name` when calling `delete_source_image_meta_dynamic_with_name`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `delete_source_image_meta_dynamic_with_name`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `delete_source_image_meta_dynamic_with_name`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        if 'meta_name' in params and not re.search('[a-zA-Z_]+', params['meta_name']):  # noqa: E501
            raise ValueError("Invalid value for parameter `meta_name` when calling `delete_source_image_meta_dynamic_with_name`, must conform to the pattern `/[a-zA-Z_]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501
        if 'meta_name' in params:
            path_params['metaName'] = params['meta_name']  # noqa: E501

        query_params = []
        if 'delete_previous' in params:
            query_params.append(('deletePrevious', params['delete_previous']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}/meta/dynamic/{metaName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SourceImage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_source_image_meta_user(self, organization, hash, **kwargs):  # noqa: E501
        """Deletes all user meta data.  # noqa: E501

        User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_source_image_meta_user(organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_source_image_meta_user_with_http_info(organization, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_source_image_meta_user_with_http_info(organization, hash, **kwargs)  # noqa: E501
            return data

    def delete_source_image_meta_user_with_http_info(self, organization, hash, **kwargs):  # noqa: E501
        """Deletes all user meta data.  # noqa: E501

        User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_source_image_meta_user_with_http_info(organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_source_image_meta_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `delete_source_image_meta_user`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `delete_source_image_meta_user`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `delete_source_image_meta_user`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `delete_source_image_meta_user`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}/meta/user', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_source_image_meta_user_with_name(self, organization, hash, meta_name, **kwargs):  # noqa: E501
        """Deletes user meta data for a specified field.  # noqa: E501

        User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_source_image_meta_user_with_name(organization, hash, meta_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :param str meta_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_source_image_meta_user_with_name_with_http_info(organization, hash, meta_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_source_image_meta_user_with_name_with_http_info(organization, hash, meta_name, **kwargs)  # noqa: E501
            return data

    def delete_source_image_meta_user_with_name_with_http_info(self, organization, hash, meta_name, **kwargs):  # noqa: E501
        """Deletes user meta data for a specified field.  # noqa: E501

        User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_source_image_meta_user_with_name_with_http_info(organization, hash, meta_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :param str meta_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'hash', 'meta_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_source_image_meta_user_with_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `delete_source_image_meta_user_with_name`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `delete_source_image_meta_user_with_name`")  # noqa: E501
        # verify the required parameter 'meta_name' is set
        if ('meta_name' not in params or
                params['meta_name'] is None):
            raise ValueError("Missing the required parameter `meta_name` when calling `delete_source_image_meta_user_with_name`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `delete_source_image_meta_user_with_name`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `delete_source_image_meta_user_with_name`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        if 'meta_name' in params and not re.search('[a-zA-Z0-9_-]+', params['meta_name']):  # noqa: E501
            raise ValueError("Invalid value for parameter `meta_name` when calling `delete_source_image_meta_user_with_name`, must conform to the pattern `/[a-zA-Z0-9_-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501
        if 'meta_name' in params:
            path_params['metaName'] = params['meta_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}/meta/user/{metaName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_source_image(self, organization, hash, **kwargs):  # noqa: E501
        """Download original source image binary.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_source_image(organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.download_source_image_with_http_info(organization, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.download_source_image_with_http_info(organization, hash, **kwargs)  # noqa: E501
            return data

    def download_source_image_with_http_info(self, organization, hash, **kwargs):  # noqa: E501
        """Download original source image binary.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_source_image_with_http_info(organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_source_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `download_source_image`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `download_source_image`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `download_source_image`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `download_source_image`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_source_image(self, organization, hash, **kwargs):  # noqa: E501
        """Get information about a source image.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_source_image(organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :return: SourceImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_source_image_with_http_info(organization, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_source_image_with_http_info(organization, hash, **kwargs)  # noqa: E501
            return data

    def get_source_image_with_http_info(self, organization, hash, **kwargs):  # noqa: E501
        """Get information about a source image.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_source_image_with_http_info(organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :return: SourceImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_source_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `get_source_image`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_source_image`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `get_source_image`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `get_source_image`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SourceImage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_source_image_meta_user(self, organization, hash, **kwargs):  # noqa: E501
        """Get all user meta data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_source_image_meta_user(organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_source_image_meta_user_with_http_info(organization, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_source_image_meta_user_with_http_info(organization, hash, **kwargs)  # noqa: E501
            return data

    def get_source_image_meta_user_with_http_info(self, organization, hash, **kwargs):  # noqa: E501
        """Get all user meta data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_source_image_meta_user_with_http_info(organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_source_image_meta_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `get_source_image_meta_user`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_source_image_meta_user`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `get_source_image_meta_user`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `get_source_image_meta_user`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}/meta/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_source_image_meta_user_with_name(self, organization, hash, meta_name, **kwargs):  # noqa: E501
        """Get user meta for a specific field.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_source_image_meta_user_with_name(organization, hash, meta_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :param str meta_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_source_image_meta_user_with_name_with_http_info(organization, hash, meta_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_source_image_meta_user_with_name_with_http_info(organization, hash, meta_name, **kwargs)  # noqa: E501
            return data

    def get_source_image_meta_user_with_name_with_http_info(self, organization, hash, meta_name, **kwargs):  # noqa: E501
        """Get user meta for a specific field.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_source_image_meta_user_with_name_with_http_info(organization, hash, meta_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :param str meta_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'hash', 'meta_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_source_image_meta_user_with_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `get_source_image_meta_user_with_name`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_source_image_meta_user_with_name`")  # noqa: E501
        # verify the required parameter 'meta_name' is set
        if ('meta_name' not in params or
                params['meta_name'] is None):
            raise ValueError("Missing the required parameter `meta_name` when calling `get_source_image_meta_user_with_name`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `get_source_image_meta_user_with_name`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `get_source_image_meta_user_with_name`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        if 'meta_name' in params and not re.search('[a-zA-Z0-9_-]+', params['meta_name']):  # noqa: E501
            raise ValueError("Invalid value for parameter `meta_name` when calling `get_source_image_meta_user_with_name`, must conform to the pattern `/[a-zA-Z0-9_-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501
        if 'meta_name' in params:
            path_params['metaName'] = params['meta_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}/meta/user/{metaName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_source_images(self, organization, **kwargs):  # noqa: E501
        """Get all images of an organization, with paging.  # noqa: E501

        You can also filter and sort by their metadata. See the API reference for more in depth documentation about this.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_source_images(organization, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str offset: When paging results, where to start or a cursor
        :param int limit: How many images should be returned
        :param str sort: The field to be used for sorting
        :param bool deleted: Search for deleted images
        :return: ListSourceImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_source_images_with_http_info(organization, **kwargs)  # noqa: E501
        else:
            (data) = self.list_source_images_with_http_info(organization, **kwargs)  # noqa: E501
            return data

    def list_source_images_with_http_info(self, organization, **kwargs):  # noqa: E501
        """Get all images of an organization, with paging.  # noqa: E501

        You can also filter and sort by their metadata. See the API reference for more in depth documentation about this.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_source_images_with_http_info(organization, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str offset: When paging results, where to start or a cursor
        :param int limit: How many images should be returned
        :param str sort: The field to be used for sorting
        :param bool deleted: Search for deleted images
        :return: ListSourceImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'offset', 'limit', 'sort', 'deleted']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_source_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `list_source_images`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `list_source_images`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'limit' in params and params['limit'] > 2000:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_source_images`, must be a value less than or equal to `2000`")  # noqa: E501
        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_source_images`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListSourceImagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_source_images_by_binary_hash(self, organization, binary_hash, **kwargs):  # noqa: E501
        """Get all images in this organization that match a binaryhash.  # noqa: E501

        The binary hash is the sha1 of the image binary. This may yield several results if the same image has been uploaded with varying dynamic metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_source_images_by_binary_hash(organization, binary_hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str binary_hash: (required)
        :return: ListSourceImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_source_images_by_binary_hash_with_http_info(organization, binary_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.list_source_images_by_binary_hash_with_http_info(organization, binary_hash, **kwargs)  # noqa: E501
            return data

    def list_source_images_by_binary_hash_with_http_info(self, organization, binary_hash, **kwargs):  # noqa: E501
        """Get all images in this organization that match a binaryhash.  # noqa: E501

        The binary hash is the sha1 of the image binary. This may yield several results if the same image has been uploaded with varying dynamic metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_source_images_by_binary_hash_with_http_info(organization, binary_hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str binary_hash: (required)
        :return: ListSourceImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'binary_hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_source_images_by_binary_hash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `list_source_images_by_binary_hash`")  # noqa: E501
        # verify the required parameter 'binary_hash' is set
        if ('binary_hash' not in params or
                params['binary_hash'] is None):
            raise ValueError("Missing the required parameter `binary_hash` when calling `list_source_images_by_binary_hash`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `list_source_images_by_binary_hash`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'binary_hash' in params:
            path_params['binaryHash'] = params['binary_hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/binaryhash/{binaryHash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListSourceImagesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_source_image_meta_user(self, user_meta_data, organization, hash, **kwargs):  # noqa: E501
        """Update the specified meta data fields for an image.  # noqa: E501

        This only overwrites the fields specified in the request, but leaves existing meta data with different names unchanged.  User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.patch_source_image_meta_user(user_meta_data, organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param object user_meta_data: User Meta Data as a json hashmap (required)
        :param str organization: (required)
        :param str hash: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.patch_source_image_meta_user_with_http_info(user_meta_data, organization, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_source_image_meta_user_with_http_info(user_meta_data, organization, hash, **kwargs)  # noqa: E501
            return data

    def patch_source_image_meta_user_with_http_info(self, user_meta_data, organization, hash, **kwargs):  # noqa: E501
        """Update the specified meta data fields for an image.  # noqa: E501

        This only overwrites the fields specified in the request, but leaves existing meta data with different names unchanged.  User metadata is used for searching images that have been stored in rokka. It will never lead to differences in the output image and thus changing it never leads to a new hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.patch_source_image_meta_user_with_http_info(user_meta_data, organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param object user_meta_data: User Meta Data as a json hashmap (required)
        :param str organization: (required)
        :param str hash: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_meta_data', 'organization', 'hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_source_image_meta_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_meta_data' is set
        if ('user_meta_data' not in params or
                params['user_meta_data'] is None):
            raise ValueError("Missing the required parameter `user_meta_data` when calling `patch_source_image_meta_user`")  # noqa: E501
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `patch_source_image_meta_user`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `patch_source_image_meta_user`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `patch_source_image_meta_user`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `patch_source_image_meta_user`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_meta_data' in params:
            body_params = params['user_meta_data']
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}/meta/user', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_source_image(self, organization, hash, **kwargs):  # noqa: E501
        """Restore source image including previously set metadata.  # noqa: E501

        If the image has been deleted but not yet purged from the system, it is restored. If an image with this hash already exists and is not deleted, information about that image is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.restore_source_image(organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :return: SourceImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.restore_source_image_with_http_info(organization, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_source_image_with_http_info(organization, hash, **kwargs)  # noqa: E501
            return data

    def restore_source_image_with_http_info(self, organization, hash, **kwargs):  # noqa: E501
        """Restore source image including previously set metadata.  # noqa: E501

        If the image has been deleted but not yet purged from the system, it is restored. If an image with this hash already exists and is not deleted, information about that image is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.restore_source_image_with_http_info(organization, hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str organization: (required)
        :param str hash: (required)
        :return: SourceImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_source_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `restore_source_image`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `restore_source_image`")  # noqa: E501

        if 'organization' in params and not re.search('[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `restore_source_image`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        if 'hash' in params and not re.search('[0-9a-fA-F]{6,40}', params['hash']):  # noqa: E501
            raise ValueError("Invalid value for parameter `hash` when calling `restore_source_image`, must conform to the pattern `/[0-9a-fA-F]{6,40}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sourceimages/{organization}/{hash}/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SourceImage',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
