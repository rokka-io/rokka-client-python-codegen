# coding: utf-8

"""
    rokka.io

    digital image processing done right. [Documentation](https://rokka.io/documentation). [Changelog](https://api.rokka.io/changelog.md).  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rokka_client_codegen.api_client import ApiClient


class AdminApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_membership(self, role, organization, user_id, **kwargs):  # noqa: E501
        """Add a rokka user into an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_membership(role, organization, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Role role: Role specification (required)
        :param str organization: (required)
        :param str user_id: (required)
        :return: UserMembership
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_membership_with_http_info(role, organization, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_membership_with_http_info(role, organization, user_id, **kwargs)  # noqa: E501
            return data

    def create_membership_with_http_info(self, role, organization, user_id, **kwargs):  # noqa: E501
        """Add a rokka user into an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_membership_with_http_info(role, organization, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Role role: Role specification (required)
        :param str organization: (required)
        :param str user_id: (required)
        :return: UserMembership
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role', 'organization', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_membership" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `create_membership`")  # noqa: E501
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `create_membership`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `create_membership`")  # noqa: E501

        if 'organization' in params and not re.search(r'[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `create_membership`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'role' in params:
            body_params = params['role']
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization}/memberships/{userId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserMembership',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_membership_and_user(self, roles, organization, **kwargs):  # noqa: E501
        """Creates a new user and api-key for the current user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_membership_and_user(roles, organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Roles roles: Roles specifications (required)
        :param str organization: (required)
        :return: UserMembership
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_membership_and_user_with_http_info(roles, organization, **kwargs)  # noqa: E501
        else:
            (data) = self.create_membership_and_user_with_http_info(roles, organization, **kwargs)  # noqa: E501
            return data

    def create_membership_and_user_with_http_info(self, roles, organization, **kwargs):  # noqa: E501
        """Creates a new user and api-key for the current user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_membership_and_user_with_http_info(roles, organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Roles roles: Roles specifications (required)
        :param str organization: (required)
        :return: UserMembership
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['roles', 'organization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_membership_and_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'roles' is set
        if ('roles' not in params or
                params['roles'] is None):
            raise ValueError("Missing the required parameter `roles` when calling `create_membership_and_user`")  # noqa: E501
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `create_membership_and_user`")  # noqa: E501

        if 'organization' in params and not re.search(r'[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `create_membership_and_user`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'roles' in params:
            body_params = params['roles']
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization}/memberships', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserMembership',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_organization(self, organization, organization_definition, **kwargs):  # noqa: E501
        """Register a new Organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_organization(organization, organization_definition, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: Name of the organization to create (must be a web safe string) (required)
        :param OrganizationDefinition organization_definition: Organization information (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_organization_with_http_info(organization, organization_definition, **kwargs)  # noqa: E501
        else:
            (data) = self.create_organization_with_http_info(organization, organization_definition, **kwargs)  # noqa: E501
            return data

    def create_organization_with_http_info(self, organization, organization_definition, **kwargs):  # noqa: E501
        """Register a new Organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_organization_with_http_info(organization, organization_definition, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: Name of the organization to create (must be a web safe string) (required)
        :param OrganizationDefinition organization_definition: Organization information (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'organization_definition']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_organization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `create_organization`")  # noqa: E501
        # verify the required parameter 'organization_definition' is set
        if ('organization_definition' not in params or
                params['organization_definition'] is None):
            raise ValueError("Missing the required parameter `organization_definition` when calling `create_organization`")  # noqa: E501

        if 'organization' in params and not re.search(r'[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `create_organization`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'organization_definition' in params:
            body_params = params['organization_definition']
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_organization_options(self, organization, organization_options, **kwargs):  # noqa: E501
        """Update options for an organization.  # noqa: E501

        This is currently used for the remote_* options.  See https://rokka.io/documentation/references/stacks.html#loading-images-from-a-remote-url for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_organization_options(organization, organization_options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: Organization name (required)
        :param OrganizationOptions organization_options: Organization options (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_organization_options_with_http_info(organization, organization_options, **kwargs)  # noqa: E501
        else:
            (data) = self.create_organization_options_with_http_info(organization, organization_options, **kwargs)  # noqa: E501
            return data

    def create_organization_options_with_http_info(self, organization, organization_options, **kwargs):  # noqa: E501
        """Update options for an organization.  # noqa: E501

        This is currently used for the remote_* options.  See https://rokka.io/documentation/references/stacks.html#loading-images-from-a-remote-url for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_organization_options_with_http_info(organization, organization_options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: Organization name (required)
        :param OrganizationOptions organization_options: Organization options (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'organization_options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_organization_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `create_organization_options`")  # noqa: E501
        # verify the required parameter 'organization_options' is set
        if ('organization_options' not in params or
                params['organization_options'] is None):
            raise ValueError("Missing the required parameter `organization_options` when calling `create_organization_options`")  # noqa: E501

        if 'organization' in params and not re.search(r'[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `create_organization_options`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'organization_options' in params:
            body_params = params['organization_options']
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization}/options', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_user(self, user_definition, **kwargs):  # noqa: E501
        """Register new user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user(user_definition, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserDefinition user_definition: User information (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_user_with_http_info(user_definition, **kwargs)  # noqa: E501
        else:
            (data) = self.create_user_with_http_info(user_definition, **kwargs)  # noqa: E501
            return data

    def create_user_with_http_info(self, user_definition, **kwargs):  # noqa: E501
        """Register new user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_with_http_info(user_definition, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserDefinition user_definition: User information (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_definition']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_definition' is set
        if ('user_definition' not in params or
                params['user_definition'] is None):
            raise ValueError("Missing the required parameter `user_definition` when calling `create_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_definition' in params:
            body_params = params['user_definition']
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_membership(self, organization, user_id, **kwargs):  # noqa: E501
        """Remove a user from an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_membership(organization, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: (required)
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_membership_with_http_info(organization, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_membership_with_http_info(organization, user_id, **kwargs)  # noqa: E501
            return data

    def delete_membership_with_http_info(self, organization, user_id, **kwargs):  # noqa: E501
        """Remove a user from an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_membership_with_http_info(organization, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: (required)
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_membership" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `delete_membership`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_membership`")  # noqa: E501

        if 'organization' in params and not re.search(r'[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `delete_membership`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization}/memberships/{userId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_billing(self, organization, **kwargs):  # noqa: E501
        """Returns monthly statistics for an organization grouped by its master and sub organisations.  # noqa: E501

        Also returns forecast for this month billing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_billing(organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: Organization name (required)
        :param str _from: From which date (rounded to first of month)
        :param str to: To which date (rounded to last of month)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_billing_with_http_info(organization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_billing_with_http_info(organization, **kwargs)  # noqa: E501
            return data

    def get_billing_with_http_info(self, organization, **kwargs):  # noqa: E501
        """Returns monthly statistics for an organization grouped by its master and sub organisations.  # noqa: E501

        Also returns forecast for this month billing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_billing_with_http_info(organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: Organization name (required)
        :param str _from: From which date (rounded to first of month)
        :param str to: To which date (rounded to last of month)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_billing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `get_billing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/billing/{organization}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_membership(self, organization, user_id, **kwargs):  # noqa: E501
        """Get information about organization membership of a rokka user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_membership(organization, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: (required)
        :param str user_id: (required)
        :return: UserMembership
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_membership_with_http_info(organization, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_membership_with_http_info(organization, user_id, **kwargs)  # noqa: E501
            return data

    def get_membership_with_http_info(self, organization, user_id, **kwargs):  # noqa: E501
        """Get information about organization membership of a rokka user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_membership_with_http_info(organization, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: (required)
        :param str user_id: (required)
        :return: UserMembership
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_membership" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `get_membership`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_membership`")  # noqa: E501

        if 'organization' in params and not re.search(r'[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `get_membership`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization}/memberships/{userId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserMembership',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization(self, organization, **kwargs):  # noqa: E501
        """Get information about an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization(organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: Organization name (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organization_with_http_info(organization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_with_http_info(organization, **kwargs)  # noqa: E501
            return data

    def get_organization_with_http_info(self, organization, **kwargs):  # noqa: E501
        """Get information about an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_with_http_info(organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: Organization name (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `get_organization`")  # noqa: E501

        if 'organization' in params and not re.search(r'[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `get_organization`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user(self, **kwargs):  # noqa: E501
        """Gets info for current user, currently just the user_id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_with_http_info(self, **kwargs):  # noqa: E501
        """Gets info for current user, currently just the user_id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_membership(self, organization, **kwargs):  # noqa: E501
        """Get information about organization memberships of an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_membership(organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: (required)
        :return: ListUserMembershipsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_membership_with_http_info(organization, **kwargs)  # noqa: E501
        else:
            (data) = self.list_membership_with_http_info(organization, **kwargs)  # noqa: E501
            return data

    def list_membership_with_http_info(self, organization, **kwargs):  # noqa: E501
        """Get information about organization memberships of an organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_membership_with_http_info(organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization: (required)
        :return: ListUserMembershipsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_membership" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization' is set
        if ('organization' not in params or
                params['organization'] is None):
            raise ValueError("Missing the required parameter `organization` when calling `list_membership`")  # noqa: E501

        if 'organization' in params and not re.search(r'[0-9a-z\\-]+', params['organization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `organization` when calling `list_membership`, must conform to the pattern `/[0-9a-z\\-]+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organization' in params:
            path_params['organization'] = params['organization']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization}/memberships', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListUserMembershipsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
