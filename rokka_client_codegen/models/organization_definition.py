# coding: utf-8

"""
    rokka.io

    digital image processing done right. [Documentation](https://rokka.io/documentation). [Changelog](https://api.rokka.io/changelog.md).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrganizationDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_email': 'str',
        'display_name': 'str',
        'master_organization': 'str'
    }

    attribute_map = {
        'billing_email': 'billing_email',
        'display_name': 'display_name',
        'master_organization': 'master_organization'
    }

    def __init__(self, billing_email=None, display_name=None, master_organization=None):  # noqa: E501
        """OrganizationDefinition - a model defined in Swagger"""  # noqa: E501

        self._billing_email = None
        self._display_name = None
        self._master_organization = None
        self.discriminator = None

        self.billing_email = billing_email
        if display_name is not None:
            self.display_name = display_name
        if master_organization is not None:
            self.master_organization = master_organization

    @property
    def billing_email(self):
        """Gets the billing_email of this OrganizationDefinition.  # noqa: E501


        :return: The billing_email of this OrganizationDefinition.  # noqa: E501
        :rtype: str
        """
        return self._billing_email

    @billing_email.setter
    def billing_email(self, billing_email):
        """Sets the billing_email of this OrganizationDefinition.


        :param billing_email: The billing_email of this OrganizationDefinition.  # noqa: E501
        :type: str
        """
        if billing_email is None:
            raise ValueError("Invalid value for `billing_email`, must not be `None`")  # noqa: E501

        self._billing_email = billing_email

    @property
    def display_name(self):
        """Gets the display_name of this OrganizationDefinition.  # noqa: E501


        :return: The display_name of this OrganizationDefinition.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OrganizationDefinition.


        :param display_name: The display_name of this OrganizationDefinition.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def master_organization(self):
        """Gets the master_organization of this OrganizationDefinition.  # noqa: E501


        :return: The master_organization of this OrganizationDefinition.  # noqa: E501
        :rtype: str
        """
        return self._master_organization

    @master_organization.setter
    def master_organization(self, master_organization):
        """Sets the master_organization of this OrganizationDefinition.


        :param master_organization: The master_organization of this OrganizationDefinition.  # noqa: E501
        :type: str
        """

        self._master_organization = master_organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
