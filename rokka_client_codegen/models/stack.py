# coding: utf-8

"""
    rokka.io

    digital image processing done right. [Documentation](https://rokka.io/documentation). [Changelog](https://api.rokka.io/changelog.md).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rokka_client_codegen.models.stack_expression import StackExpression  # noqa: F401,E501
from rokka_client_codegen.models.stack_operation import StackOperation  # noqa: F401,E501


class Stack(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'organization': 'str',
        'created': 'datetime',
        'stack_operations': 'list[StackOperation]',
        'stack_options': 'object',
        'stack_expressions': 'list[StackExpression]',
        'link': 'str'
    }

    attribute_map = {
        'name': 'name',
        'organization': 'organization',
        'created': 'created',
        'stack_operations': 'stack_operations',
        'stack_options': 'stack_options',
        'stack_expressions': 'stack_expressions',
        'link': 'link'
    }

    def __init__(self, name=None, organization=None, created=None, stack_operations=None, stack_options=None, stack_expressions=None, link=None):  # noqa: E501
        """Stack - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._organization = None
        self._created = None
        self._stack_operations = None
        self._stack_options = None
        self._stack_expressions = None
        self._link = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if organization is not None:
            self.organization = organization
        if created is not None:
            self.created = created
        if stack_operations is not None:
            self.stack_operations = stack_operations
        if stack_options is not None:
            self.stack_options = stack_options
        if stack_expressions is not None:
            self.stack_expressions = stack_expressions
        if link is not None:
            self.link = link

    @property
    def name(self):
        """Gets the name of this Stack.  # noqa: E501


        :return: The name of this Stack.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Stack.


        :param name: The name of this Stack.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this Stack.  # noqa: E501


        :return: The organization of this Stack.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Stack.


        :param organization: The organization of this Stack.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def created(self):
        """Gets the created of this Stack.  # noqa: E501


        :return: The created of this Stack.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Stack.


        :param created: The created of this Stack.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def stack_operations(self):
        """Gets the stack_operations of this Stack.  # noqa: E501


        :return: The stack_operations of this Stack.  # noqa: E501
        :rtype: list[StackOperation]
        """
        return self._stack_operations

    @stack_operations.setter
    def stack_operations(self, stack_operations):
        """Sets the stack_operations of this Stack.


        :param stack_operations: The stack_operations of this Stack.  # noqa: E501
        :type: list[StackOperation]
        """

        self._stack_operations = stack_operations

    @property
    def stack_options(self):
        """Gets the stack_options of this Stack.  # noqa: E501


        :return: The stack_options of this Stack.  # noqa: E501
        :rtype: object
        """
        return self._stack_options

    @stack_options.setter
    def stack_options(self, stack_options):
        """Sets the stack_options of this Stack.


        :param stack_options: The stack_options of this Stack.  # noqa: E501
        :type: object
        """

        self._stack_options = stack_options

    @property
    def stack_expressions(self):
        """Gets the stack_expressions of this Stack.  # noqa: E501


        :return: The stack_expressions of this Stack.  # noqa: E501
        :rtype: list[StackExpression]
        """
        return self._stack_expressions

    @stack_expressions.setter
    def stack_expressions(self, stack_expressions):
        """Sets the stack_expressions of this Stack.


        :param stack_expressions: The stack_expressions of this Stack.  # noqa: E501
        :type: list[StackExpression]
        """

        self._stack_expressions = stack_expressions

    @property
    def link(self):
        """Gets the link of this Stack.  # noqa: E501


        :return: The link of this Stack.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Stack.


        :param link: The link of this Stack.  # noqa: E501
        :type: str
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stack):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
