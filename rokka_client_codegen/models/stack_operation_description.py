# coding: utf-8

"""
    rokka.io

    digital image processing done right. [Documentation](https://rokka.io/documentation). [Changelog](https://api.rokka.io/changelog.md).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StackOperationDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'properties': 'dict(str, object)',
        'description': 'str',
        'required': 'list[str]',
        'one_of': 'list[str]'
    }

    attribute_map = {
        'properties': 'properties',
        'description': 'description',
        'required': 'required',
        'one_of': 'oneOf'
    }

    def __init__(self, properties=None, description=None, required=None, one_of=None):  # noqa: E501
        """StackOperationDescription - a model defined in Swagger"""  # noqa: E501

        self._properties = None
        self._description = None
        self._required = None
        self._one_of = None
        self.discriminator = None

        self.properties = properties
        self.description = description
        if required is not None:
            self.required = required
        if one_of is not None:
            self.one_of = one_of

    @property
    def properties(self):
        """Gets the properties of this StackOperationDescription.  # noqa: E501


        :return: The properties of this StackOperationDescription.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this StackOperationDescription.


        :param properties: The properties of this StackOperationDescription.  # noqa: E501
        :type: dict(str, object)
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def description(self):
        """Gets the description of this StackOperationDescription.  # noqa: E501


        :return: The description of this StackOperationDescription.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StackOperationDescription.


        :param description: The description of this StackOperationDescription.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def required(self):
        """Gets the required of this StackOperationDescription.  # noqa: E501


        :return: The required of this StackOperationDescription.  # noqa: E501
        :rtype: list[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this StackOperationDescription.


        :param required: The required of this StackOperationDescription.  # noqa: E501
        :type: list[str]
        """

        self._required = required

    @property
    def one_of(self):
        """Gets the one_of of this StackOperationDescription.  # noqa: E501


        :return: The one_of of this StackOperationDescription.  # noqa: E501
        :rtype: list[str]
        """
        return self._one_of

    @one_of.setter
    def one_of(self, one_of):
        """Sets the one_of of this StackOperationDescription.


        :param one_of: The one_of of this StackOperationDescription.  # noqa: E501
        :type: list[str]
        """

        self._one_of = one_of

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StackOperationDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
