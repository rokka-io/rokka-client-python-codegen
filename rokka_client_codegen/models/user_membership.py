# coding: utf-8

"""
    rokka.io

    digital image processing done right. [Documentation](https://rokka.io/documentation). [Changelog](https://api.rokka.io/changelog.md).  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserMembership(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'email': 'str',
        'roles': 'list[str]',
        'api_key': 'str',
        'organization_id': 'str',
        'active': 'bool',
        'last_access': 'datetime'
    }

    attribute_map = {
        'user_id': 'user_id',
        'email': 'email',
        'roles': 'roles',
        'api_key': 'api_key',
        'organization_id': 'organization_id',
        'active': 'active',
        'last_access': 'last_access'
    }

    def __init__(self, user_id=None, email=None, roles=None, api_key=None, organization_id=None, active=None, last_access=None):  # noqa: E501
        """UserMembership - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._email = None
        self._roles = None
        self._api_key = None
        self._organization_id = None
        self._active = None
        self._last_access = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if email is not None:
            self.email = email
        if roles is not None:
            self.roles = roles
        if api_key is not None:
            self.api_key = api_key
        if organization_id is not None:
            self.organization_id = organization_id
        if active is not None:
            self.active = active
        if last_access is not None:
            self.last_access = last_access

    @property
    def user_id(self):
        """Gets the user_id of this UserMembership.  # noqa: E501


        :return: The user_id of this UserMembership.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserMembership.


        :param user_id: The user_id of this UserMembership.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def email(self):
        """Gets the email of this UserMembership.  # noqa: E501


        :return: The email of this UserMembership.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserMembership.


        :param email: The email of this UserMembership.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def roles(self):
        """Gets the roles of this UserMembership.  # noqa: E501


        :return: The roles of this UserMembership.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserMembership.


        :param roles: The roles of this UserMembership.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def api_key(self):
        """Gets the api_key of this UserMembership.  # noqa: E501


        :return: The api_key of this UserMembership.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this UserMembership.


        :param api_key: The api_key of this UserMembership.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def organization_id(self):
        """Gets the organization_id of this UserMembership.  # noqa: E501


        :return: The organization_id of this UserMembership.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this UserMembership.


        :param organization_id: The organization_id of this UserMembership.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def active(self):
        """Gets the active of this UserMembership.  # noqa: E501


        :return: The active of this UserMembership.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UserMembership.


        :param active: The active of this UserMembership.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def last_access(self):
        """Gets the last_access of this UserMembership.  # noqa: E501


        :return: The last_access of this UserMembership.  # noqa: E501
        :rtype: datetime
        """
        return self._last_access

    @last_access.setter
    def last_access(self, last_access):
        """Sets the last_access of this UserMembership.


        :param last_access: The last_access of this UserMembership.  # noqa: E501
        :type: datetime
        """

        self._last_access = last_access

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserMembership, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserMembership):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
