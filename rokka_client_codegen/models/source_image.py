# coding: utf-8

"""
    rokka.io

    digital image processing done right. [Documentation](https://rokka.io/documentation). [Changelog](https://api.rokka.io/changelog.md).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SourceImage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hash': 'str',
        'short_hash': 'str',
        'binary_hash': 'str',
        'created': 'datetime',
        'name': 'str',
        'mimetype': 'str',
        'format': 'str',
        'size': 'int',
        'width': 'int',
        'height': 'int',
        'organization': 'str',
        'link': 'str',
        'dynamic_metadata': 'object',
        'static_metadata': 'object',
        'user_metadata': 'object',
        'deleted': 'bool',
        'deleted_date': 'datetime'
    }

    attribute_map = {
        'hash': 'hash',
        'short_hash': 'short_hash',
        'binary_hash': 'binary_hash',
        'created': 'created',
        'name': 'name',
        'mimetype': 'mimetype',
        'format': 'format',
        'size': 'size',
        'width': 'width',
        'height': 'height',
        'organization': 'organization',
        'link': 'link',
        'dynamic_metadata': 'dynamic_metadata',
        'static_metadata': 'static_metadata',
        'user_metadata': 'user_metadata',
        'deleted': 'deleted',
        'deleted_date': 'deleted_date'
    }

    def __init__(self, hash=None, short_hash=None, binary_hash=None, created=None, name=None, mimetype=None, format=None, size=None, width=None, height=None, organization=None, link=None, dynamic_metadata=None, static_metadata=None, user_metadata=None, deleted=None, deleted_date=None):  # noqa: E501
        """SourceImage - a model defined in Swagger"""  # noqa: E501

        self._hash = None
        self._short_hash = None
        self._binary_hash = None
        self._created = None
        self._name = None
        self._mimetype = None
        self._format = None
        self._size = None
        self._width = None
        self._height = None
        self._organization = None
        self._link = None
        self._dynamic_metadata = None
        self._static_metadata = None
        self._user_metadata = None
        self._deleted = None
        self._deleted_date = None
        self.discriminator = None

        if hash is not None:
            self.hash = hash
        if short_hash is not None:
            self.short_hash = short_hash
        if binary_hash is not None:
            self.binary_hash = binary_hash
        if created is not None:
            self.created = created
        if name is not None:
            self.name = name
        if mimetype is not None:
            self.mimetype = mimetype
        if format is not None:
            self.format = format
        if size is not None:
            self.size = size
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if organization is not None:
            self.organization = organization
        if link is not None:
            self.link = link
        if dynamic_metadata is not None:
            self.dynamic_metadata = dynamic_metadata
        if static_metadata is not None:
            self.static_metadata = static_metadata
        if user_metadata is not None:
            self.user_metadata = user_metadata
        if deleted is not None:
            self.deleted = deleted
        if deleted_date is not None:
            self.deleted_date = deleted_date

    @property
    def hash(self):
        """Gets the hash of this SourceImage.  # noqa: E501


        :return: The hash of this SourceImage.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this SourceImage.


        :param hash: The hash of this SourceImage.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def short_hash(self):
        """Gets the short_hash of this SourceImage.  # noqa: E501


        :return: The short_hash of this SourceImage.  # noqa: E501
        :rtype: str
        """
        return self._short_hash

    @short_hash.setter
    def short_hash(self, short_hash):
        """Sets the short_hash of this SourceImage.


        :param short_hash: The short_hash of this SourceImage.  # noqa: E501
        :type: str
        """

        self._short_hash = short_hash

    @property
    def binary_hash(self):
        """Gets the binary_hash of this SourceImage.  # noqa: E501


        :return: The binary_hash of this SourceImage.  # noqa: E501
        :rtype: str
        """
        return self._binary_hash

    @binary_hash.setter
    def binary_hash(self, binary_hash):
        """Sets the binary_hash of this SourceImage.


        :param binary_hash: The binary_hash of this SourceImage.  # noqa: E501
        :type: str
        """

        self._binary_hash = binary_hash

    @property
    def created(self):
        """Gets the created of this SourceImage.  # noqa: E501


        :return: The created of this SourceImage.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SourceImage.


        :param created: The created of this SourceImage.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def name(self):
        """Gets the name of this SourceImage.  # noqa: E501


        :return: The name of this SourceImage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceImage.


        :param name: The name of this SourceImage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def mimetype(self):
        """Gets the mimetype of this SourceImage.  # noqa: E501


        :return: The mimetype of this SourceImage.  # noqa: E501
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this SourceImage.


        :param mimetype: The mimetype of this SourceImage.  # noqa: E501
        :type: str
        """

        self._mimetype = mimetype

    @property
    def format(self):
        """Gets the format of this SourceImage.  # noqa: E501


        :return: The format of this SourceImage.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SourceImage.


        :param format: The format of this SourceImage.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def size(self):
        """Gets the size of this SourceImage.  # noqa: E501


        :return: The size of this SourceImage.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SourceImage.


        :param size: The size of this SourceImage.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def width(self):
        """Gets the width of this SourceImage.  # noqa: E501


        :return: The width of this SourceImage.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SourceImage.


        :param width: The width of this SourceImage.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this SourceImage.  # noqa: E501


        :return: The height of this SourceImage.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SourceImage.


        :param height: The height of this SourceImage.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def organization(self):
        """Gets the organization of this SourceImage.  # noqa: E501


        :return: The organization of this SourceImage.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this SourceImage.


        :param organization: The organization of this SourceImage.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def link(self):
        """Gets the link of this SourceImage.  # noqa: E501


        :return: The link of this SourceImage.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this SourceImage.


        :param link: The link of this SourceImage.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def dynamic_metadata(self):
        """Gets the dynamic_metadata of this SourceImage.  # noqa: E501


        :return: The dynamic_metadata of this SourceImage.  # noqa: E501
        :rtype: object
        """
        return self._dynamic_metadata

    @dynamic_metadata.setter
    def dynamic_metadata(self, dynamic_metadata):
        """Sets the dynamic_metadata of this SourceImage.


        :param dynamic_metadata: The dynamic_metadata of this SourceImage.  # noqa: E501
        :type: object
        """

        self._dynamic_metadata = dynamic_metadata

    @property
    def static_metadata(self):
        """Gets the static_metadata of this SourceImage.  # noqa: E501


        :return: The static_metadata of this SourceImage.  # noqa: E501
        :rtype: object
        """
        return self._static_metadata

    @static_metadata.setter
    def static_metadata(self, static_metadata):
        """Sets the static_metadata of this SourceImage.


        :param static_metadata: The static_metadata of this SourceImage.  # noqa: E501
        :type: object
        """

        self._static_metadata = static_metadata

    @property
    def user_metadata(self):
        """Gets the user_metadata of this SourceImage.  # noqa: E501


        :return: The user_metadata of this SourceImage.  # noqa: E501
        :rtype: object
        """
        return self._user_metadata

    @user_metadata.setter
    def user_metadata(self, user_metadata):
        """Sets the user_metadata of this SourceImage.


        :param user_metadata: The user_metadata of this SourceImage.  # noqa: E501
        :type: object
        """

        self._user_metadata = user_metadata

    @property
    def deleted(self):
        """Gets the deleted of this SourceImage.  # noqa: E501

        Null as default (means false)  # noqa: E501

        :return: The deleted of this SourceImage.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SourceImage.

        Null as default (means false)  # noqa: E501

        :param deleted: The deleted of this SourceImage.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def deleted_date(self):
        """Gets the deleted_date of this SourceImage.  # noqa: E501


        :return: The deleted_date of this SourceImage.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_date

    @deleted_date.setter
    def deleted_date(self, deleted_date):
        """Sets the deleted_date of this SourceImage.


        :param deleted_date: The deleted_date of this SourceImage.  # noqa: E501
        :type: datetime
        """

        self._deleted_date = deleted_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceImage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
